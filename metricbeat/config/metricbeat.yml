########################## Metricbeat Configuration ###########################
metricbeat.max_start_delay: 10s
name: ${NODE_NAME}
setup.dashboards.enabled: true
setup.template.enabled: true
setup.kibana:
  host: "kibana:5601"

metricbeat.autodiscover:
  providers:

    - type: docker
      labels.dedot: true
      templates:
        - condition:
            contains:
              docker.container.image: rabbitmq
          config:
            - module: rabbitmq
              metricsets: ["node", "queue", "connection", "exchange"]
              username: guest
              password: guest
              period: 10s
              hosts: ["${data.host}:15672"]

    - type: docker
      labels.dedot: true
      templates:
        - condition:
            contains:
              docker.container.image: haproxy
          config:
            - module: haproxy
              metricsets: ["info", "stat"]
              period: 10s
              hosts: ["tcp://${data.host}:14567"]

    - type: docker
      labels.dedot: true
      templates:
        - condition:
            contains:
              docker.container.image: apache
          config:
            - module: apache
              server_status_path: "server-status"
              metricsets: ["status"]
              period: 10s
              hosts: "http://${data.host}:${data.port}"

    - type: docker
      labels.dedot: true
      templates:
        - condition:
            contains:
              docker.container.image: postgres
          config:
            - module: postgresql
              metricsets: ["database", "bgwriter", "activity"]
              period: 10s
              hosts: "postgres://postgres@${data.host}:${data.port}?sslmode=disable"

    - type: docker
      labels.dedot: true
      templates:
        - condition:
            contains:
              docker.container.image: kibana
          config:
            - module: kibana
              metricsets: ["status"]
              period: 10s
              hosts: "${data.host}:${data.port}"

metricbeat.modules:
- module: system
  metricsets:
    - cpu
    - filesystem
    - fsstat
    - load
    - memory
    - network
    - process
    - process_summary
    - uptime
    - core
    - diskio
    - socket
  interface: [enp0s3,eth0]
  enabled: true
  period: 10s
  processes: ['.*']
  cpu.metrics:  ["percentages"]
  core.metrics: ["percentages"]

- module: docker
  metricsets: ["container", "cpu", "diskio", "event", "healthcheck", "image", "info", "memory", "network"]
  hosts: ["unix:///var/run/docker.sock"]
  period: 10s

#- module: haproxy
#  metricsets: ["info", "stat"]
#  period: 10s
#  hosts: ["tcp://127.0.0.1:14567"]

#- module: mongodb
#  metricsets: ["dbstats", "status"]
#  period: 10s
#  hosts: ["${MONGODB_HOST}:${MONGODB_PORT}"]
#  username: ???
#  password: ???

#- module: rabbitmq
#  metricsets: ["node", "queue"]
#  period: 10s
#  hosts: ["rabbitmq:15672"]
#  username: ???
#  password: ???

#- module: http
#  metricsets: ["something with an api"]
#  period: 10s
#  hosts: ["localhost:80"]
#  namespace: "json_namespace"
#  path: "/"
#  body: ""
#  method: "GET"
#  request.enabled: false
#  response.enabled: false
#  dedot.enabled: false

processors:
- add_docker_metadata:
    host: "unix:///var/run/docker.sock"
# - add_host_metadata:
#    netinfo.enabled: true

output:
#  logstash:
#    hosts: ["logstash:5044"]
   elasticsearch:
     hosts: ["http://elasticsearch:9200"]

logging.level: info
logging.json: false
logging.metrics.enabled: true
ssl.verification_mode: none
